{"version":3,"file":"a0b5c8a7-ef82-45d2-a82f-c759597c520f.mjs","sources":["../../../src/mastra/tools/search-tool.ts"],"sourcesContent":["import { createTool } from '@mastra/core/tools';\nimport { z } from 'zod';\n\ninterface BraveSearchResponse {\n  web: {\n    results: {\n      title: string;\n      url: string;\n      description: string;\n      date: string;\n    }[];\n  };\n  query: {\n    original: string;\n  };\n}\n\nexport const searchTool = createTool({\n  id: 'brave-search',\n  description: 'Search the web using Brave Search API',\n  inputSchema: z.object({\n    query: z.string().describe('Search query'),\n    count: z.number().optional().describe('Number of results to return (default: 10)'),\n  }),\n  outputSchema: z.object({\n    results: z.array(z.object({\n      title: z.string(),\n      url: z.string(),\n      description: z.string(),\n      date: z.string(),\n    })),\n    query: z.string(),\n  }),\n  execute: async ({ context }) => {\n    return await performSearch(context.query, context.count || 10);\n  },\n});\n\nconst performSearch = async (query: string, count: number = 10) => {\n  const apiKey = process.env.BRAVE_SEARCH_API_KEY;\n  \n  if (!apiKey) {\n    throw new Error('BRAVE_SEARCH_API_KEY environment variable is required');\n  }\n\n  const searchUrl = `https://api.search.brave.com/res/v1/web/search?q=${encodeURIComponent(query)}&count=${count}`;\n\n  const response = await fetch(searchUrl, {\n    headers: {\n      'Accept': 'application/json',\n      'Accept-Encoding': 'gzip',\n      'X-Subscription-Token': apiKey,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(`Brave Search API error: ${response.status} ${response.statusText}`);\n  }\n\n  const data = (await response.json()) as BraveSearchResponse;\n\n  if (!data.web?.results) {\n    throw new Error('No search results found');\n  }\n\n  return {\n    results: data.web.results.map(result => ({\n      title: result.title,\n      url: result.url,\n      description: result.description,\n      date: result.date || '',\n    })),\n    query: data.query.original,\n  };\n};"],"names":[],"mappings":";;;AAiBO,MAAM,aAAa,UAAA,CAAW;AAAA,EACnC,EAAA,EAAI,cAAA;AAAA,EACJ,WAAA,EAAa,uCAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,KAAA,EAAO,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,cAAc,CAAA;AAAA,IACzC,OAAO,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,SAAS,2CAA2C;AAAA,GAClF,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,OAAA,EAAS,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MACxB,KAAA,EAAO,EAAE,MAAA,EAAO;AAAA,MAChB,GAAA,EAAK,EAAE,MAAA,EAAO;AAAA,MACd,WAAA,EAAa,EAAE,MAAA,EAAO;AAAA,MACtB,IAAA,EAAM,EAAE,MAAA;AAAO,KAChB,CAAC,CAAA;AAAA,IACF,KAAA,EAAO,EAAE,MAAA;AAAO,GACjB,CAAA;AAAA,EACD,OAAA,EAAS,OAAO,EAAE,OAAA,EAAQ,KAAM;AAC9B,IAAA,OAAO,MAAM,aAAA,CAAc,OAAA,CAAQ,KAAA,EAAO,OAAA,CAAQ,SAAS,EAAE,CAAA;AAAA;AAEjE,CAAC;AAED,MAAM,aAAA,GAAgB,OAAO,KAAA,EAAe,KAAA,GAAgB,EAAA,KAAO;AACjE,EAAA,MAAM,MAAA,GAAS,QAAQ,GAAA,CAAI,oBAAA;AAE3B,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,MAAM,IAAI,MAAM,uDAAuD,CAAA;AAAA;AAGzE,EAAA,MAAM,YAAY,CAAA,iDAAA,EAAoD,kBAAA,CAAmB,KAAK,CAAC,UAAU,KAAK,CAAA,CAAA;AAE9G,EAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,SAAA,EAAW;AAAA,IACtC,OAAA,EAAS;AAAA,MACP,QAAA,EAAU,kBAAA;AAAA,MACV,iBAAA,EAAmB,MAAA;AAAA,MACnB,sBAAA,EAAwB;AAAA;AAC1B,GACD,CAAA;AAED,EAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,IAAA,MAAM,IAAI,MAAM,CAAA,wBAAA,EAA2B,QAAA,CAAS,MAAM,CAAA,CAAA,EAAI,QAAA,CAAS,UAAU,CAAA,CAAE,CAAA;AAAA;AAGrF,EAAA,MAAM,IAAA,GAAQ,MAAM,QAAA,CAAS,IAAA,EAAK;AAElC,EAAA,IAAI,CAAC,IAAA,CAAK,GAAA,EAAK,OAAA,EAAS;AACtB,IAAA,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAAA;AAG3C,EAAA,OAAO;AAAA,IACL,OAAA,EAAS,IAAA,CAAK,GAAA,CAAI,OAAA,CAAQ,IAAI,CAAA,MAAA,MAAW;AAAA,MACvC,OAAO,MAAA,CAAO,KAAA;AAAA,MACd,KAAK,MAAA,CAAO,GAAA;AAAA,MACZ,aAAa,MAAA,CAAO,WAAA;AAAA,MACpB,IAAA,EAAM,OAAO,IAAA,IAAQ;AAAA,KACvB,CAAE,CAAA;AAAA,IACF,KAAA,EAAO,KAAK,KAAA,CAAM;AAAA,GACpB;AACF,CAAA;;;;"}